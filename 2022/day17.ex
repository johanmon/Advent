defmodule Day17 do

  def sample() do
    '>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>'
  end

  def input() do
    File.read!("day17.csv") |>
      String.trim() |>
      String.to_charlist()
  end

  def task_a(rocks) do
    wind = wind(sample())
    cave = cave()    
    {n, _floor, _cave} = tetris(0, rocks, 0, 0, cave, wind)
    ##print(cave, n, floor)
    n
  end

  def task_aa(rocks) do
    if (rocks < 30) do
      task_a(rocks)
    else
      table = {0, 0, 2, 5, 9, 9, 10, 12, 13, 15, 15, 16, 18, 19, 21, 21, 22, 25, 27, 27, 27,28, 31, 34, 38, 38, 39, 41, 44, 44, 45, 46, 49, 51, 53}
      k = div(rocks - 30, 35) 
      elem(table, rem(rocks - 30, 35)) + 51 + k*53
    end
  end

  def task_b(rocks) do
    wind = wind(input())
    cave = cave()    
    {n, _floor, _cave} = tetris(0, rocks, 0, 0, cave, wind)
    # print(cave, n, floor)
    n
  end
  
  
  def task_bb(rocks) do
    if (rocks < 227) do
      task_b(rocks)
    else
      k = div(rocks - 227, 1750)
      i = rem(rocks - 227, 1750)
      e = elem(table(), i)
      :io.format("table[~w]  ~w + 336 + ~w*2724 = ~w \n", [i, e, k, (e + 336 + k*2724)])
      e + 336 + k*2724
    end  
  end

  def test_a(k) do
    Enum.reduce(1..20, 0, fn(i,a) ->
      n = task_a(i*k)
      :io.format("  n = ~w   (~w) \n", [n, (n-a)])
      n
    end)
  end
  def test_b(k) do
    Enum.reduce(1..20, 0, fn(i,a) ->
      n = task_b(i*k)
      :io.format("  n = ~w   (~w) \n", [n, (n-a)])
      n
    end)
  end  
      

  
  def tetris(rocks, rocks, n, floor, cave, _) do
    {n, floor, cave}
  end
  def tetris(rks, rocks, n, floor, cave, wind) do
    ## :io.format(" rks = ~w  n = ~w\n", [rks,n])
    {n, cave, wind} = (rock(rks)).({n+4,3}, n, floor, cave, wind)
    ## {raised, cave} = trim(n, floor, cave)
    if (rem(rks-227,1750) == 0) do
      :io.format(" k = ~w  n = ~w floor = ~w\n", [rks, n, floor])
    else
      # :io.format("          k = ~w  n = ~w\n", [rks, n])
    end
    tetris(rks+1, rocks, n, floor, cave, wind)
  end

  def print(cave, n, floor) do
    IO.write("\n")
    IO.write("\n")    
    for x <- n..(floor+1) do
      :io.format("~4.w  |", [x])
      for y <- 1..7 do
	if (free(cave, {x,y}) ) do
	  IO.write(".")
	else
	  IO.write("#")
	end
      end
      IO.write("\n")
    end
    IO.write("\n")
  end


  def trim(n, floor, cave) do
    res = Enum.reduce_while(n..(floor+1), cave, fn(i, cave) ->
      if ( marked(cave, {i,1})) do 
      case walk({i,1}, cave) do
	{:ok, k} ->
	  cave = remove(cave, floor+1, k)
	  {:halt, {k, cave}}
	{:no, _} ->
	  {:cont, cave}
      end
      else
	{:cont, cave}
      end
    end)
    case res do
      {floor, cave} -> {floor, cave}
      _ -> {floor, cave}
    end
  end

  def walk(pos, cave) do
    walk(pos, MapSet.new([pos]), cave)
  end

  def walk({x,7}, _path, _cave) do {:ok, x} end
  def walk({x,y}, path, cave) do
    res = Enum.reduce_while([{x+1,y-1},{x+1,y},{x+1,y+1},{x,y-1},{x,y+1},{x-1,y-1},{x-1, y}, {x-1,y+1}], path, fn({x,y}, path) ->
      if (marked(cave, {x,y}) and !loop(path, {x,y})) do
	 path = MapSet.put(path, {x, y})
	 case walk({x,y}, path, cave) do
	   {:ok, k} ->
	     {:halt, {:ok, min(k,x)}}
	   {:no, path} ->
	     {:cont, path}
	 end
      else
	{:cont, path}
      end
    end)
    case res do
      {:ok, k} -> {:ok, k}
      path -> {:no, path}
    end
  end
  
  def bar({x,y}, n, floor, cave, wind) do
    ##  the shape 
    ##
    ##    x###
    ##
    {jet,wind} = jet(wind)
    {x,y} = case jet do
      ?> ->
	if ((y < 4) and free(cave,{x,y+4})) do
	  {x,y+1}
	else
	  {x,y}
	end
     ?< ->
	if ((y > 1) and free(cave,{x,y-1})) do
	  {x,y-1}
	else
	  {x,y}
	end
      end

    if ((x - 1 > floor) and free(cave, {x-1,y}) and free(cave, {x-1,y+1}) and free(cave, {x-1,y+2}) and free(cave, {x-1,y+3}) ) do
      bar({x-1, y}, n, floor, cave, wind)
    else
      cave = block(cave, {x,y})
      cave = block(cave, {x,y+1})      
      cave = block(cave, {x,y+2})
      cave = block(cave, {x,y+3})
      ## :io.format(" adding bar at ~w\n", [{x,y}])
      {max(n,x), cave, wind}
    end
  end


  def cross({x,y}, n, floor, cave, wind) do
    ##  the shape 
    ##
    ##     #
    ##    ###
    ##    .#

    {jet,wind} = jet(wind)
    {x,y} = case jet do
      ?> ->
	if ((y < 5) and free(cave,{x+2,y+2}) and free(cave,{x+1,y+3}) and free(cave,{x,y+2})) do
	  {x,y+1}
	else
	  {x,y}
	end
     ?< ->
	if ( (y > 1) and free(cave,{x+2,y}) and free(cave,{x+1,y-1}) and free(cave,{x,y}) ) do
	  {x,y-1}
	else
	  {x,y}
	end
      end

    if ((x-1 > floor) and free(cave, {x,y}) and free(cave, {x-1,y+1}) and free(cave, {x,y+2}) ) do
      cross({x-1, y}, n, floor, cave, wind)
    else

      cave = block(cave, {x+1,y})

      cave = block(cave, {x,y+1})      
      cave = block(cave, {x+1,y+1})
      cave = block(cave, {x+2,y+1})      

      cave = block(cave, {x+1,y+2})      
      ## :io.format(" adding cross at ~w\n", [{x,y}])
      {max(n,x+2), cave, wind}
    end
  end   


  def el({x,y}, n, floor, cave, wind) do
    ##  the shape 
    ##
    ##      #
    ##      #
    ##    x##
    
    {jet,wind} = jet(wind)
    {x,y} = case jet do
      ?> ->
	if ((y < 5) and free(cave,{x+2,y+3}) and free(cave,{x+1,y+3}) and free(cave,{x,y+3})) do
	  {x,y+1}
	else
	  {x,y}
	end
     ?< ->
	if ( (y > 1) and free(cave,{x+2,y+1}) and free(cave,{x+1,y+1}) and free(cave,{x,y-1}) ) do
	  {x,y-1}
	else
	  {x,y}
	end
      end

    if (((x-1) > floor) and free(cave, {x-1,y}) and free(cave, {x-1,y+1}) and free(cave, {x-1,y+2}) ) do
      el({x-1, y}, n, floor, cave, wind)
    else

      cave = block(cave, {x,y})
      cave = block(cave, {x,y+1})      
      cave = block(cave, {x,y+2})

      cave = block(cave, {x+1,y+2})
      cave = block(cave, {x+2,y+2})            
      ## :io.format(" adding el at ~w\n", [{x,y}])
      {max(n,x+2), cave, wind}
    end
  end   


  def rod({x,y}, n, floor, cave, wind) do
    ##  the shape 
    ##
    ##    #
    ##    #
    ##    #
    ##    x    

    ## :io.format(" rod at ~w ", [{x,y}])
    {jet,wind} = jet(wind)
    {x,y} = case jet do
      ?> ->
	if ((y < 7) and free(cave,{x,y+1}) and free(cave,{x+1,y+1}) and free(cave,{x+2,y+1}) and free(cave,{x+3,y+1})) do
	  ## :io.format(" right ~w ", [{x,y+1}])
	  {x,y+1}
	else
	  {x,y}
	end
     ?< ->
	if ( (y > 1) and free(cave,{x,y-1}) and free(cave,{x+1,y-1}) and free(cave,{x+2,y-1}) and free(cave,{x+3,y-1}) ) do
	  ## :io.format(" left ~w ", [{x,y-1}])
	  {x,y-1}
	else
	  {x,y}
	end
      end

    if (((x-1) > floor) and free(cave, {x-1,y}) ) do
      ## :io.format(" down\n", [])
      rod({x-1, y}, n, floor, cave, wind)
    else

      cave = block(cave, {x,y})
      cave = block(cave, {x+1,y})
      cave = block(cave, {x+2,y})
      cave = block(cave, {x+3,y})      
      ## :io.format(" adding rod at ~w\n", [{x,y}])
      {max(n,x+3), cave, wind}
    end
  end   

  def block({x,y}, n, floor, cave, wind) do
    ##  the shape 
    ##
    ##    ##
    ##    x#

    {jet,wind} = jet(wind)
    {x,y} = case jet do
      ?> ->
	if ((y < 6) and free(cave,{x,y+2}) and free(cave,{x+1,y+2}) )do
	  {x,y+1}
	else
	  {x,y}
	end
     ?< ->
	if ( (y > 1) and free(cave,{x,y-1}) and free(cave,{x+1,y-1}) ) do
	  {x,y-1}
	else
	  {x,y}
	end
      end

    if (((x-1) > floor) and free(cave, {x-1,y}) and free(cave, {x-1,y+1}) ) do
      block({x-1, y}, n, floor, cave, wind)
    else

      cave = block(cave, {x,y})
      cave = block(cave, {x,y+1})      
      cave = block(cave, {x+1,y})
      cave = block(cave, {x+1,y+1})      
      ## :io.format(" adding block at ~w\n", [{x,y}])
      {max(n,x+1), cave, wind}
    end
  end   

  def rock(i) do
    rocks = { &bar(&1,&2,&3,&4,&5),
	      &cross(&1,&2,&3,&4,&5),
	      &el(&1,&2,&3,&4,&5),
	      &rod(&1,&2,&3,&4,&5),
	      &block(&1,&2,&3,&4,&5) }
    ## :io.format("select ~w\n", [rem(i,5)])
    elem(rocks, rem(i,5))
  end

  def wind(wind) do
    {wind, wind}
  end
  
  def jet({[], wind}) do
    jet({wind, wind})
  end
  def jet({[jet|rest], wind}) do
    {jet, {rest, wind}}
  end

  def cave() do
    Map.new()
  end

  def marked(cave, {x,y}) do
    case Map.get(cave, x) do
      nil -> false
      row ->
	MapSet.member?(row,y)
    end
  end    
  
  def free(cave, {x,y}) do
    case Map.get(cave, x) do
      nil -> true
      row ->
	!(MapSet.member?(row,y))
    end
  end

  def remove(cave, frm, to) do
    Enum.reduce(frm..to, cave, fn(i, cave) -> Map.delete(cave, i) end)
  end
  
  
  def filled(cave, x) do
    case Map.get(cave, x) do
      nil ->
	false
      row ->
	MapSet.size(row) == 7
    end
  end

  def block(cave, {x,y}) do
    Map.update(cave, x,  MapSet.new([y]), fn(row) -> MapSet.put(row, y) end)
  end

  def loop(path, {x,y}) do
    MapSet.member?(path, {x,y})
  end


  def table() do
    {0,0,4,6,7,10,10,14,14,15,18,21,21,23,24,26,28,29,29,29,32,35,35,35,36,37,39,41,43,44,47,49,50,52,52,53,56,58,58,59,61,64,66,66,67,70,72,73,75,76,78,81,83,85,86,89,91,95,95,95,97,100,104,104,105,108,111,111,111,112,115,118,118,118,119,122,125,125,125,126,126,129,129,129,130,132,133,134,136,137,140,143,143,145,146,148,150,152,154,155,155,158,160,160,161,164,164,167,169,170,173,173,176,176,177,180,182,183,185,186,187,190,190,192,193,195,197,197,199,200,203,205,209,211,212,215,215,218,218,219,222,224,224,226,227,230,230,233,233,234,236,239,239,239,240,243,246,246,246,247,249,252,254,256,257,259,261,262,262,262,264,265,266,266,266,269,271,273,273,274,277,279,280,280,280,283,285,285,285,286,289,291,291,291,292,294,297,297,297,298,300,301,303,303,304,306,307,309,311,312,315,318,320,320,321,324,327,331,333,333,336,336,336,338,339,342,342,344,344,345,348,351,351,351,351,353,355,356,356,357,360,360,362,364,365,368,368,371,371,371,374,377,381,381,382,385,388,390,390,391,393,395,395,397,397,397,400,402,404,405,407,408,410,410,410,412,414,416,418,419,422,425,425,425,425,427,430,434,434,434,434,437,441,441,442,445,448,452,452,453,456,456,459,459,460,462,465,465,466,467,470,470,471,472,473,476,476,479,479,480,483,483,486,486,487,490,492,492,494,495,498,498,501,501,502,505,507,509,509,510,513,516,520,520,521,524,526,526,527,527,530,532,536,536,537,540,543,543,543,544,547,549,549,550,550,553,555,559,559,559,559,562,562,562,562,565,568,570,572,573,575,578,578,580,581,584,584,587,587,587,590,590,593,593,594,597,599,601,603,604,607,610,612,614,614,614,617,621,621,622,625,628,628,628,629,631,632,635,635,635,636,639,641,643,644,647,650,652,652,653,655,656,658,658,658,661,663,663,663,664,666,669,669,669,669,672,674,676,676,677,680,683,687,689,690,693,695,697,699,700,702,703,705,705,706,709,709,713,713,713,714,717,717,719,720,722,723,726,726,727,730,732,734,736,737,739,742,742,742,742,743,743,746,748,749,751,754,754,754,754,757,760,762,762,763,766,766,768,768,769,771,774,774,774,775,777,778,780,780,781,783,786,786,786,786,789,791,792,794,794,795,797,799,799,800,803,805,807,807,807,809,812,814,816,817,820,822,822,822,823,826,828,832,832,832,832,834,836,836,836,839,841,842,842,843,846,849,849,849,850,853,856,858,858,859,862,865,867,867,868,871,873,875,875,876,879,881,885,887,888,891,894,894,894,895,897,898,900,902,903,905,907,909,909,909,911,913,917,919,920,923,923,926,926,927,930,932,936,936,937,940,942,942,942,943,946,949,949,949,950,952,954,956,956,957,959,960,962,964,965,967,969,969,971,972,974,976,980,980,981,984,986,988,988,989,992,994,996,996,997,1000,1003,1005,1005,1006,1009,1009,1013,1013,1014,1016,1018,1018,1018,1019,1021,1024,1024,1024,1025,1028,1030,1032,1032,1032,1035,1038,1042,1044,1045,1048,1051,1055,1055,1056,1058,1060,1060,1062,1063,1065,1066,1068,1070,1071,1074,1077,1079,1079,1080,1083,1086,1086,1086,1087,1090,1092,1096,1096,1097,1100,1102,1102,1104,1104,1104,1107,1109,1111,1111,1111,1114,1118,1120,1121,1123,1124,1127,1127,1128,1130,1132,1132,1134,1135,1137,1138,1141,1141,1141,1142,1144,1145,1145,1146,1149,1149,1149,1150,1151,1154,1156,1157,1159,1160,1160,1163,1165,1165,1166,1169,1172,1176,1176,1177,1180,1183,1187,1187,1188,1191,1193,1195,1195,1196,1198,1199,1201,1201,1202,1205,1208,1208,1208,1209,1212,1215,1219,1219,1219,1219,1222,1226,1226,1227,1229,1230,1233,1233,1233,1235,1238,1242,1242,1243,1246,1248,1250,1250,1251,1253,1256,1256,1256,1257,1260,1262,1263,1265,1266,1267,1270,1270,1270,1271,1274,1276,1280,1280,1280,1280,1281,1283,1285,1286,1289,1291,1291,1293,1294,1297,1300,1304,1304,1305,1308,1310,1312,1312,1313,1315,1318,1320,1322,1323,1326,1328,1330,1332,1333,1336,1339,1339,1339,1340,1342,1345,1347,1347,1347,1349,1352,1356,1356,1357,1357,1358,1361,1361,1362,1365,1367,1367,1367,1368,1370,1373,1373,1375,1376,1379,1382,1382,1382,1383,1386,1389,1389,1389,1390,1393,1395,1399,1399,1400,1402,1403,1405,1405,1406,1409,1411,1411,1413,1414,1414,1417,1419,1419,1420,1422,1425,1427,1427,1428,1428,1431,1433,1433,1434,1437,1440,1444,1444,1445,1448,1451,1455,1455,1456,1458,1460,1460,1460,1461,1464,1466,1468,1468,1469,1471,1472,1472,1473,1474,1477,1477,1480,1482,1482,1482,1484,1486,1488,1489,1491,1493,1495,1497,1498,1498,1501,1502,1502,1503,1503,1506,1508,1508,1509,1512,1514,1518,1518,1518,1518,1521,1523,1525,1526,1527,1530,1532,1534,1534,1534,1537,1538,1539,1540,1543,1546,1548,1548,1549,1552,1554,1558,1558,1559,1562,1562,1564,1564,1565,1568,1571,1571,1571,1572,1575,1578,1582,1584,1585,1587,1589,1589,1589,1590,1593,1595,1595,1595,1596,1599,1601,1603,1603,1604,1607,1607,1609,1609,1610,1612,1613,1615,1617,1618,1621,1623,1625,1625,1625,1627,1629,1631,1631,1631,1633,1636,1638,1640,1641,1641,1644,1644,1644,1645,1648,1650,1654,1654,1655,1657,1660,1660,1662,1662,1663,1665,1666,1668,1669,1672,1675,1677,1677,1678,1681,1684,1686,1686,1687,1689,1692,1694,1696,1697,1700,1703,1705,1707,1708,1711,1713,1717,1717,1718,1721,1721,1721,1723,1724,1727,1730,1730,1732,1733,1736,1739,1743,1743,1744,1747,1749,1749,1749,1750,1753,1753,1755,1755,1756,1759,1762,1762,1764,1765,1768,1771,1775,1777,1777,1779,1781,1782,1783,1783,1786,1786,1788,1790,1790,1790,1793,1793,1795,1796,1799,1801,1802,1804,1805,1807,1810,1810,1810,1810,1811,1812,1814,1814,1815,1818,1821,1821,1821,1822,1825,1825,1828,1830,1831,1834,1834,1834,1836,1837,1837,1840,1842,1844,1845,1848,1848,1851,1853,1853,1853,1856,1856,1856,1857,1859,1861,1865,1865,1865,1868,1871,1873,1875,1876,1879,1881,1885,1887,1888,1890,1891,1893,1893,1894,1897,1900,1900,1900,1901,1903,1906,1906,1906,1907,1910,1913,1917,1917,1918,1921,1921,1921,1923,1924,1926,1928,1930,1932,1933,1936,1939,1941,1943,1944,1947,1949,1953,1953,1953,1955,1955,1958,1960,1960,1960,1963,1967,1967,1968,1971,1973,1975,1977,1978,1980,1981,1983,1983,1984,1986,1987,1987,1987,1988,1991,1994,1994,1996,1997,2000,2003,2007,2007,2008,2011,2014,2018,2020,2021,2024,2026,2026,2026,2027,2030,2033,2035,2035,2036,2038,2040,2042,2042,2043,2043,2046,2048,2050,2051,2054,2054,2056,2056,2057,2059,2061,2063,2065,2065,2065,2068,2068,2068,2068,2071,2074,2076,2076,2077,2080,2080,2084,2084,2084,2086,2089,2089,2090,2091,2093,2095,2097,2097,2098,2101,2104,2106,2108,2109,2112,2112,2115,2117,2118,2119,2122,2126,2126,2127,2130,2130,2134,2136,2137,2138,2140,2141,2141,2141,2144,2147,2151,2151,2152,2155,2155,2157,2157,2158,2161,2163,2164,2165,2166,2167,2169,2171,2171,2172,2174,2176,2178,2178,2179,2182,2185,2185,2185,2186,2189,2192,2194,2196,2197,2200,2202,2202,2202,2202,2205,2208,2208,2210,2211,2214,2217,2221,2223,2223,2223,2223,2227,2227,2228,2230,2233,2237,2239,2240,2243,2246,2248,2248,2249,2252,2255,2257,2257,2258,2260,2263,2265,2265,2266,2268,2271,2271,2271,2272,2275,2277,2279,2279,2280,2283,2286,2286,2288,2289,2289,2292,2292,2294,2295,2297,2299,2300,2301,2302,2305,2308,2308,2308,2309,2311,2314,2316,2316,2316,2318,2321,2323,2325,2326,2329,2331,2333,2333,2334,2336,2338,2338,2340,2340,2342,2344,2348,2350,2351,2354,2356,2357,2359,2360,2363,2366,2366,2366,2367,2369,2370,2372,2374,2375,2377,2380,2380,2382,2383,2385,2388,2388,2388,2389,2392,2394,2395,2397,2398,2400,2401,2404,2404,2404,2405,2408,2408,2410,2410,2412,2413,2415,2415,2415,2417,2419,2423,2423,2423,2425,2428,2428,2428,2429,2432,2434,2438,2438,2439,2442,2444,2446,2446,2446,2448,2450,2452,2452,2453,2456,2458,2459,2461,2462,2465,2468,2470,2470,2471,2474,2477,2479,2479,2480,2482,2484,2486,2486,2487,2490,2492,2492,2492,2493,2495,2498,2500,2502,2502,2502,2504,2508,2510,2511,2514,2517,2517,2517,2518,2521,2524,2526,2528,2529,2532,2535,2537,2537,2538,2541,2544,2546,2548,2549,2551,2554,2558,2558,2559,2562,2562,2565,2565,2566,2569,2569,2573,2573,2573,2575,2578,2582,2582,2583,2586,2588,2592,2594,2595,2597,2599,2601,2601,2602,2605,2607,2607,2607,2608,2611,2611,2613,2613,2614,2617,2617,2619,2621,2622,2625,2627,2629,2631,2631,2634,2637,2639,2639,2639,2641,2643,2645,2647,2648,2651,2651,2655,2657,2658,2661,2663,2663,2665,2666,2669,2672,2672,2674,2675,2677,2679,2681,2681,2682,2685,2685,2688,2688,2689,2689,2692,2694,2696,2697,2700,2702,2704,2706,2707,2710,2713,2713,2713,2714,2717,2717,2720,2720,2721}
    end
  
  
end
